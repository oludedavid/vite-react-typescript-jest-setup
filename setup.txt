step1: Create a vite application with yarn:
    #this will create a react and typescript application
    run: yarn create vite . --template react-ts
     

step 2: Add the following dependencies:
    #this packages are needed to run jest with typescript
    #identity-obj-proxy: is usually used to mock styling files (css, sass etcâ€¦).
    run: yarn add -D jest @types/jest @testing-library/react @testing-library/dom @testing-library/jest-dom @testing-library/user-event @babel/core @babel/preset-env @babel/preset-react @babel/preset-typescript babel-jest identity-obj-proxy jest-environment-jsdom ts-node 

step 3: create a file that will serve as a global mocker for images and other weird file extensions, in the root dir create test/__mocks__/ and add fileMock.js with the following content:
    add this to the fileMock.js: module.exports = 'test-file-stub';

step 4: optional(for Typescript only),To avoid TS issues on your test files include the jest config in the tsconfig.app.json file:
    update tsconfig.app.json: "include": ["src", "./jest.setup.ts"]

step 5: Babel configuration, configure babel in order to transpile your JSX/TSX syntax to jest understandable one, for that create .babelrc file at the root of the project and add the following:
    add this to the .babelrc file created: 
    {
  "presets": [
    ["@babel/preset-env", { "targets": { "esmodules": true } }], // It's the name of the lib you installed
    ["@babel/preset-react", { "runtime": "automatic" }], // It's the name of the lib you installed
    "@babel/preset-typescript" // It's the name of the lib you installed
        ]
    }

step 6: Update the package.json, add the following commands to package.json for running tests and code coverage, respectively
    add this to the package.json script:
        "test": "jest --watchAll",
        "cov": "jest --coverage --collectCoverageFrom='src/**/*.{js,jsx}'"

step 7: create a simple test


step 8: To run the jest tests simply run 
    run: yarn test